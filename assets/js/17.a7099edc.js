(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{198:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"变量、作用域和内存问题-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量、作用域和内存问题-context","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量、作用域和内存问题 context")]),t._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h3",{attrs:{id:"基本类型-和-引用类型-的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型-和-引用类型-的值","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型 和 引用类型 的值")]),t._v(" "),s("ul",[s("li",[t._v("基本类型有：Undefined, Null, Boolean, Number, String (与 java 不同，string 也是基本类型)")]),t._v(" "),s("li",[t._v("引用类型是指可能由多个值构成的对象")])]),t._v(" "),s("h4",{attrs:{id:"基本类型值和引用类型值的特点："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型值和引用类型值的特点：","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型值和引用类型值的特点：")]),t._v(" "),s("ul",[s("li",[t._v("基本类型值在内存中占据固定大小的空间，因此保存在栈内存中")]),t._v(" "),s("li",[t._v("引用类型的值是对象，保存在堆内存中")]),t._v(" "),s("li",[t._v("包含引用类型的变量实际上包含的并不是对象本身，而是指向该对象的指针")]),t._v(" "),s("li",[t._v("一个变量赋值给另一个变量，如果是基本类型，会创建这个值的副本，如果是引用类型，复制的其实是指针。最终两个变量指向同一个对象。")])]),t._v(" "),s("ol",[s("li",[t._v("引用类型可以添加属性，基本类型不可以。例如:")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"123"')]),t._v("；\na"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("21")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("函数是按值传递参数的，而非按引用传递参数。（相当于被传递的值会复制给函数的参数，基本类型和引用类型各自的复制不同）")]),t._v(" "),s("li",[t._v("检测类型")])]),t._v(" "),s("ul",[s("li",[t._v("typeof 基本类型可以有效的判别基本类型")]),t._v(" "),s("li",[t._v("instanceof 来判别某个值是何种对象")])]),t._v(" "),s("h2",{attrs:{id:"执行环境及作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行环境及作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 执行环境及作用域")]),t._v(" "),s("h4",{attrs:{id:"_1-执行环境（作用域）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行环境（作用域）","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 执行环境（作用域）")]),t._v(" "),s("ul",[s("li",[t._v("执行环境分为全局环境和函数执行环境")]),t._v(" "),s("li",[t._v("每次进入新的执行环境，会创建新的作用域链")]),t._v(" "),s("li",[t._v("作用域链中，局部的环境，有权访问父级的作用域，无权访问子级作用域")]),t._v(" "),s("li",[t._v("执行环境有助于确定何时释放内存")])]),t._v(" "),s("h4",{attrs:{id:"_2-作用域链延长："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域链延长：","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 作用域链延长：")]),t._v(" "),s("ul",[s("li",[t._v("with 语句")]),t._v(" "),s("li",[t._v("try-catch 语句的 catch 块")]),t._v(" "),s("li",[t._v("catch 块中，只对传进来的 e 特殊处理，在 catch 声明的变量，依然能在 catch 外部块访问到，说明他并不是单独的作用域")])]),t._v(" "),s("h4",{attrs:{id:"_3-js-没有块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-js-没有块级作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. js 没有块级作用域")]),t._v(" "),s("p",[t._v("js 的作用域是函数级的，没有块级作用域，这点经常会导致理解上的错误。\n例如：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("10")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("doSomeThing")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("alert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),s("p",[t._v("变量名 i 在第四行仍然可以打印出来，是因为，for 循环中，并不是独立的作用域。var i , 会被提升到 for 循环所在的函数。所以 i 仍然存在")]),t._v(" "),s("blockquote",[s("p",[t._v("变量名提升：使用 var 声明的变量会自动被添加到最接近的环境中，而没用 var 的，则会添加到全局环境中")])]),t._v(" "),s("h2",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("h4",{attrs:{id:"_1-标记清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记清除","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 标记清除")]),t._v(" "),s("ul",[s("li",[t._v("离开作用域的值自动被标记为可回收。因此在垃圾收集阶段将被回收")]),t._v(" "),s("li",[t._v("目前主流的收集算法是标记清除")])]),t._v(" "),s("h4",{attrs:{id:"_2-引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用计数","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 引用计数")]),t._v(" "),s("ul",[s("li",[t._v("引用计数在循环引用的时候，可能导致内存泄漏")]),t._v(" "),s("li",[t._v("应该在变量不需要用到的时候解除引用，有助于解除循环引用，并且有效的垃圾回收")])]),t._v(" "),s("h4",{attrs:{id:"_3-管理内存：为了确保占用最少的内存让页面获得更好的性能，则需要解除引用（当变量不在有用，将其置为-null）；"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-管理内存：为了确保占用最少的内存让页面获得更好的性能，则需要解除引用（当变量不在有用，将其置为-null）；","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 管理内存：为了确保占用最少的内存让页面获得更好的性能，则需要解除引用（当变量不在有用，将其置为 null）；")]),t._v(" "),s("pre",[s("code",[t._v("> 注意，解除引用后，并不意味着立即被回收，只有下次垃圾收集器执行的时候，才会真正回收\n")])])])}],!1,null,null,null);r.options.__file="context.md";a.default=r.exports}}]);