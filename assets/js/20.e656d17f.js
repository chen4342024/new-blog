(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{214:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 引用类型")]),a._v(" "),s("p",[a._v("引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，将数据和功能组织在一起")]),a._v(" "),s("h2",{attrs:{id:"object-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" Object 对象")]),a._v(" "),s("h3",{attrs:{id:"创建-object-实例方法有两种："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-object-实例方法有两种：","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建 Object 实例方法有两种：")]),a._v(" "),s("ol",[s("li",[a._v("使用构造方法："),s("code",[a._v("new Object();")])]),a._v(" "),s("li",[a._v("使用对象字面量 "),s("code",[a._v("var obj = { name：'andy chen' }")])])]),a._v(" "),s("blockquote",[s("p",[a._v("使用对象字面量定义对象的时候，实际上并不会调用构造方法，推荐使用对象字面量方法")])]),a._v(" "),s("h3",{attrs:{id:"访问对象属性的方法也有两种："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问对象属性的方法也有两种：","aria-hidden":"true"}},[a._v("#")]),a._v(" 访问对象属性的方法也有两种：")]),a._v(" "),s("ol",[s("li",[a._v("点表示法 例如： "),s("code",[a._v("console.log(obj.name)")])]),a._v(" "),s("li",[a._v("方括号法 例如： "),s("code",[a._v('console.log(obj["name"])')])])]),a._v(" "),s("blockquote",[s("p",[a._v("通常，除了使用变量来访问属性，否则建议用点表示法")])]),a._v(" "),s("h2",{attrs:{id:"array-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" Array 对象")]),a._v(" "),s("h3",{attrs:{id:"创建-array-数组也有两种方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-array-数组也有两种方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建 Array 数组也有两种方法：")]),a._v(" "),s("ol",[s("li",[a._v("使用构造方法：")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr1 "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{attrs:{class:"token comment"}},[a._v("//创建空数组")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr2 "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token number"}},[a._v("5")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{attrs:{class:"token comment"}},[a._v("//创建length为5的数组，所有项都为undefined")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr3 "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token string"}},[a._v('"andy chen"')]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{attrs:{class:"token comment"}},[a._v("//创建length为1，该值为andy chen的数组")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr4 "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("Array")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("；"),s("span",{attrs:{class:"token comment"}},[a._v("//省略new与不省略一样")]),a._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("使用对象字面量 "),s("code",[a._v("var arr = [1,2,3]")])])]),a._v(" "),s("blockquote",[s("p",[a._v("小技巧：每当在数组末尾添加一项后，其 length 会自动更新。故可以通过 "),s("code",[a._v("arr[arr.length] = XXX")]),a._v(" ，来为数组末尾添加数据\n数组最多可包含 4294967295 项")])]),a._v(" "),s("h3",{attrs:{id:"数组常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组常用方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组常用方法")]),a._v(" "),s("h4",{attrs:{id:"检测方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检测方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 检测方法：")]),a._v(" "),s("ul",[s("li",[a._v("ES5 : "),s("code",[a._v("isArray()")])])]),a._v(" "),s("h4",{attrs:{id:"转换方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 转换方法:")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("toLocaleString()")]),a._v(" "),s("code",[a._v("toString()")]),a._v(" "),s("code",[a._v("valueOf()")]),a._v(" "),s("blockquote",[s("p",[a._v("输出的时候，默认调用的是 toString 方法")])])])]),a._v(" "),s("h4",{attrs:{id:"栈方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈方法：")]),a._v(" "),s("p",[s("code",[a._v("pop()")]),a._v(" "),s("code",[a._v("push()")])]),a._v(" "),s("h4",{attrs:{id:"队列方法-："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列方法-：","aria-hidden":"true"}},[a._v("#")]),a._v(" 队列方法 ：")]),a._v(" "),s("p",[s("code",[a._v("shift()")]),a._v(" "),s("code",[a._v("unshift()")])]),a._v(" "),s("h4",{attrs:{id:"重排序方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重排序方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 重排序方法：")]),a._v(" "),s("ul",[s("li",[a._v("反转 ： "),s("code",[a._v("reverse")])]),a._v(" "),s("li",[a._v("对数组排序： "),s("code",[a._v("sort")]),a._v(" "),s("blockquote",[s("p",[a._v("sort 默认比较的是各个数组项的 toString 方法，所以 ‘5’会大于 ‘10’，所以一般会传递一个比较函数给 sort。")])])])]),a._v(" "),s("h4",{attrs:{id:"操作方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 操作方法")]),a._v(" "),s("p",[s("code",[a._v("concat")]),a._v(" "),s("code",[a._v("slice")]),a._v(" "),s("code",[a._v("splice")])]),a._v(" "),s("h4",{attrs:{id:"位置方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 位置方法")]),a._v(" "),s("p",[s("code",[a._v("lastIndexOf")]),a._v(" , "),s("code",[a._v("indexOf")])]),a._v(" "),s("h4",{attrs:{id:"迭代方法-："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法-：","aria-hidden":"true"}},[a._v("#")]),a._v(" 迭代方法 ：")]),a._v(" "),s("p",[s("code",[a._v("every")]),a._v(" "),s("code",[a._v("filter")]),a._v(" "),s("code",[a._v("forEach")]),a._v(" "),s("code",[a._v("map")]),a._v(" "),s("code",[a._v("some")])]),a._v(" "),s("h4",{attrs:{id:"归并方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 归并方法：")]),a._v(" "),s("p",[s("code",[a._v("reduce")]),a._v(" "),s("code",[a._v("reduceRight")])]),a._v(" "),s("h2",{attrs:{id:"date-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-类型","aria-hidden":"true"}},[a._v("#")]),a._v(" Date 类型")]),a._v(" "),s("ul",[s("li",[a._v("Date.UTC() 返回表示 UTC 时间的毫秒数")]),a._v(" "),s("li",[a._v("Date.parse() 返回表示相应日期的毫秒数")]),a._v(" "),s("li",[a._v("Date 类型与其他引用类型一样，重写了 toString()， toLocalString() ， valueOf()方法,其中 ValueOf 返回日期的毫秒数，所以可以直接用 ＜ 或 > 比较日期的大小")])]),a._v(" "),s("blockquote",[s("p",[a._v("+new Date() : 用+号可以将 date 类型转换成数值")])]),a._v(" "),s("h2",{attrs:{id:"regexp-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-类型","aria-hidden":"true"}},[a._v("#")]),a._v(" RegExp 类型")]),a._v(" "),s("h3",{attrs:{id:"创建正则表达式："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式：","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建正则表达式：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("var expression = / pattern / flags ;")])]),a._v(" "),s("li",[s("code",[a._v("var re = new RegExp( pattern, flags );")])])]),a._v(" "),s("h3",{attrs:{id:"正则表达式包含-3-个标志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式包含-3-个标志","aria-hidden":"true"}},[a._v("#")]),a._v(" 正则表达式包含 3 个标志:")]),a._v(" "),s("ul",[s("li",[a._v("g ： 表示全局 ，表示搜索一整个字符串，而非匹配到第一个就停止")]),a._v(" "),s("li",[a._v("i ： 不区分大小写")]),a._v(" "),s("li",[a._v("m ： 表示多行模式，搜索一行后，会继续下一行")])]),a._v(" "),s("blockquote",[s("p",[a._v("正则表达式中的元字符必须转义: "),s("code",[a._v("（［｛＼＾＄｜）＊＋．］｝")]),a._v("这些元字符必须转义.\n传递给 RegExp 中的 pattern 为字符串，由于字符串会对"),s("code",[a._v("\\ 或 \\n")]),a._v("，等进行转义。所以必须进行二次转义\n例如： 向匹配 "),s("code",[a._v("[")]),a._v("，则表达式为"),s("code",[a._v("/\\[/")]),a._v("，但是传给 RegExp 的字符串为 ： "),s("code",[a._v('"\\\\["')])])]),a._v(" "),s("h3",{attrs:{id:"regexp-实例属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-实例属性","aria-hidden":"true"}},[a._v("#")]),a._v(" RegExp 实例属性")]),a._v(" "),s("ul",[s("li",[a._v("global ：表示是否设置了 g 标志")]),a._v(" "),s("li",[a._v("ignoreCase ： 表示是否设置了 i 表示")]),a._v(" "),s("li",[a._v("multiline ： 表示是否设置了 m 标志")]),a._v(" "),s("li",[a._v("lastIndex ： 表示开始搜搜下一项匹配项的字符位置")]),a._v(" "),s("li",[a._v("source ： 正则表达式的字符串表示")])]),a._v(" "),s("h3",{attrs:{id:"regexp-的实例方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-的实例方法","aria-hidden":"true"}},[a._v("#")]),a._v(" RegExp 的实例方法")]),a._v(" "),s("ul",[s("li",[a._v("exec 方法 :\n接收一个参数，返回包含第一个匹配项信息的数组，没有匹配项则返回 null\n该返回匹配项信息为一个数组,额外还有两个属性：")]),a._v(" "),s("li",[a._v("index：表示匹配在字符串内容的位置")]),a._v(" "),s("li",[a._v("input 属性： 应用到正则表达式的字符串内容")]),a._v(" "),s("li",[a._v("test 方法：\n接受一个字符串参数，在模式与该参数匹配的情况下返回 true.")]),a._v(" "),s("li",[a._v("toString（） , toLocaleString（）: 都返回表达式的对象字面量。")])]),a._v(" "),s("h3",{attrs:{id:"regexp-构造函数属性（即是静态属性）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regexp-构造函数属性（即是静态属性）","aria-hidden":"true"}},[a._v("#")]),a._v(" RegExp 构造函数属性（即是静态属性）")]),a._v(" "),s("ul",[s("li",[a._v("input : 最近一次匹配的字符串 缩写： "),s("code",[a._v("$ _")])]),a._v(" "),s("li",[a._v("lastMatch ： 最近一次的匹配项 缩写： "),s("code",[a._v("$&")])]),a._v(" "),s("li",[a._v("lastParen ： 最近一次匹配的捕获组 缩写： "),s("code",[a._v("$+")])]),a._v(" "),s("li",[a._v("leftContext ：input 中 lastMatch 之前的文本 缩写： $`")]),a._v(" "),s("li",[a._v("multiline ：是否使用多行 缩写： "),s("code",[a._v("$*")])]),a._v(" "),s("li",[a._v("rightContent ：input 中 lastMatch 之前的文本 缩写： "),s("code",[a._v("$&#39")]),a._v(";")]),a._v(" "),s("li",[s("code",[a._v("$1 , $2 ...$9")]),a._v(" 表示匹配的捕获组")])]),a._v(" "),s("h3",{attrs:{id:"模式的局限性："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式的局限性：","aria-hidden":"true"}},[a._v("#")]),a._v(" 模式的局限性：")]),a._v(" "),s("p",[a._v("ECMAScript 的正则表达式功能还是比较完备的，但是仍然缺少某些语言所支持的高级特性。")]),a._v(" "),s("h2",{attrs:{id:"function-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-类型","aria-hidden":"true"}},[a._v("#")]),a._v(" Function 类型")]),a._v(" "),s("p",[a._v("函数是对象，函数名实际上是一个指向函数对象的指针，不会与某个函数绑定")]),a._v(" "),s("h3",{attrs:{id:"函数定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数定义","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数定义")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[a._v("//函数声明语法定义")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("sum")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("   doSomething"),s("span",{attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{attrs:{class:"token comment"}},[a._v("//函数表达式定义")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token function"}},[a._v("funciton")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("   doSomething"),s("span",{attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{attrs:{class:"token comment"}},[a._v("//使用Function构造函数：")]),a._v("\n"),s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{attrs:{class:"token class-name"}},[a._v("Function")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("param1"),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("param2"),s("span",{attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{attrs:{class:"token string"}},[a._v('"doSomething"')]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{attrs:{class:"token comment"}},[a._v("//doSomeThing为方法体")]),a._v("\n")])])]),s("h4",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点","aria-hidden":"true"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),s("ul",[s("li",[a._v("函数没有重载，在创建第二个同名函数的时候，会覆盖掉上一个")]),a._v(" "),s("li",[a._v("函数声明提升：在代码开始执行之前，解析器就已经通过了一个函数声明提升的过程，读取并将函数声明添加到执行环境当中，所以，即使声明函数的代码在调用它的代码后面，js 引擎也能把函数声明提升到顶部")])]),a._v(" "),s("h3",{attrs:{id:"函数内部属性："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数内部属性：","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数内部属性：")]),a._v(" "),s("ul",[s("li",[a._v("arguments：一个类数组对象，包含传入函数中的所有参数，arguments.callee ，指向拥有 arguments 对象的函数")]),a._v(" "),s("li",[a._v("this ：引用的是函数据以执行的环境对象，当在全局作用域中调用函数时，this 指向 window")]),a._v(" "),s("li",[a._v("caller : 保存着调用当前函数的函数的引用，如果是全局调用，则为 null。\n使用方法：functionName.caller , 由于 functionName 需要名字，也可以通过 arguments.callee.caller")]),a._v(" "),s("li",[a._v("在严格模式下，arguments.callee 会导致错误，也不能为函数的 caller 属性赋值")])]),a._v(" "),s("h3",{attrs:{id:"函数属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数属性和方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数属性和方法")]),a._v(" "),s("ul",[s("li",[a._v("length : 函数希望接受的参数个数")]),a._v(" "),s("li",[a._v("prototype : 保存所有实例方法的真正所在。")]),a._v(" "),s("li",[a._v("apply： 在特定的作用域中运行函数，接受两个参数，一个是函数作用域，一个是参数数组")]),a._v(" "),s("li",[a._v("call：在特定的作用域中运行函数（与 apply 作用相同），与 apply 不同的是，参数直接传递给函数\ncall 和 apply 真正的用武之地是能够扩充函数的赖以运行的作用域")]),a._v(" "),s("li",[a._v("bind： 会创建一个函数的实例，其 this 值会被绑定到传给 bind 函数的值")])]),a._v(" "),s("h2",{attrs:{id:"基本包装类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本包装类型")]),a._v(" "),s("p",[a._v("为了便于操作基本类型值，es 提供了 3 个特殊的引用类型：Boolean ， Number ， String\n由于基本类型不是对象，所以逻辑上讲他们不应该有方法。但是我们可以调用许多方法，是因为后台其实帮我们做了一系列的事")]),a._v(" "),s("h4",{attrs:{id:"读取字符串时："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取字符串时：","aria-hidden":"true"}},[a._v("#")]),a._v(" 读取字符串时：")]),a._v(" "),s("ul",[s("li",[a._v("创建 String 类型的一个实例")]),a._v(" "),s("li",[a._v("在实例上调用制定的方法")]),a._v(" "),s("li",[a._v("销毁这个实例")])]),a._v(" "),s("blockquote",[s("p",[a._v("引用类型与基本包装类型的区别主要在于对象的声明生存期。使用 new 操作符创建的引用类型的实例，在执行流离开作用域之前一直保存在内存中。而自动创建的基本包装类型，则只存在于一行代码的执行瞬间，然后被立即销毁")])]),a._v(" "),s("h3",{attrs:{id:"number："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number：","aria-hidden":"true"}},[a._v("#")]),a._v(" Number：")]),a._v(" "),s("ul",[s("li",[a._v("toFixed ： 按照指定的小数位返回数值的字符串")]),a._v(" "),s("li",[a._v("toExponential : 返回以指数表示法表示的数值的字符串形式")]),a._v(" "),s("li",[a._v("toPrecision ： 返回固定大小格式，或返回指数格式")])]),a._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[a._v("#")]),a._v(" String")]),a._v(" "),s("h4",{attrs:{id:"字符方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符方法")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("charAt")]),a._v(" : 返回给定位置的那个字符")]),a._v(" "),s("li",[s("code",[a._v("charCodeAt")]),a._v(" ： 返回给定位置的字符编码")])]),a._v(" "),s("h4",{attrs:{id:"字符串操作方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符串操作方法")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("concat：")]),a._v(" ：拼接字符串")]),a._v(" "),s("li",[s("code",[a._v("slice ( start , end )")]),a._v(": 返回一个子字符串。start 或 end 为负数时候，表示末尾往前")]),a._v(" "),s("li",[s("code",[a._v("substr( start , count)")]),a._v(" : 返回一个子字符串。start 为负数时候，表示从后往前，end 为负数时，表示 0")]),a._v(" "),s("li",[s("code",[a._v("substring( start , end )")]),a._v(" : 返回一个子字符串。start 为负数时候，表示 0")])]),a._v(" "),s("h4",{attrs:{id:"字符串位置方法-："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串位置方法-：","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符串位置方法 ：")]),a._v(" "),s("p",[s("code",[a._v("indexOf")]),a._v(", "),s("code",[a._v("lastIndexOf")])]),a._v(" "),s("h4",{attrs:{id:"trim-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trim-方法","aria-hidden":"true"}},[a._v("#")]),a._v(" "),s("code",[a._v("trim")]),a._v(" 方法 :")]),a._v(" "),s("p",[a._v("去除前后的空格")]),a._v(" "),s("h4",{attrs:{id:"字符串大小转换方法："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串大小转换方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符串大小转换方法：")]),a._v(" "),s("p",[s("code",[a._v("toLowerCase()")]),a._v(" , "),s("code",[a._v("toUpperCase()")]),a._v(" , "),s("code",[a._v("toLocaleLowerCase()")]),a._v(" "),s("code",[a._v("toLocaleUpperCase()")]),a._v(" "),s("code",[a._v("在不知道自己的代码将在哪种语言环境下运行，还是使用针对地区的方法更稳妥一些.eg:toLocaleLowerCase()")])]),a._v(" "),s("h4",{attrs:{id:"字符串模式匹配方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串模式匹配方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符串模式匹配方法")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("match")]),a._v(" ：返回一个数组，第一项是与整个模式匹配的字符串，之后的每一项保存着与正则表达式中的捕获组匹配的字符串（本质上与调用Ｒ egExp 的 exec 方法相同）")]),a._v(" "),s("li",[s("code",[a._v("search")]),a._v(" ： 返回参数在字符串中第一次出现的位置")]),a._v(" "),s("li",[s("code",[a._v("replace")]),a._v(" ：将第二个参数的内容替换掉第一参数的内容。只会替换第一个子字符串，如果想替换所有，第二个参数提供一个正则表达式，并指定全局ｇ标志。第二个参数也可以是一个函数")]),a._v(" "),s("li",[s("code",[a._v("split")]),a._v(" : 指定分隔符将字符串分隔成多个字符串")]),a._v(" "),s("li",[s("code",[a._v("localeCompare")]),a._v(" 方法：小于则返回负数，等于返回 0，大于返回正数")]),a._v(" "),s("li",[s("code",[a._v("fromCharCode")]),a._v(" 方法:接受 1 或多个字符编码，转换成字符串。与 charCodeAt 是相反的操作")])]),a._v(" "),s("h2",{attrs:{id:"单体内置对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单体内置对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 单体内置对象")]),a._v(" "),s("h3",{attrs:{id:"global-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" Global 对象")]),a._v(" "),s("h4",{attrs:{id:"uri-编码方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uri-编码方法","aria-hidden":"true"}},[a._v("#")]),a._v(" URI 编码方法")]),a._v(" "),s("ul",[s("li",[a._v("encodeURI :主要用于整段 URL，进行编码。不会对属于 URI 的字符进行编码，例如冒号，正斜杠，问号和井号")]),a._v(" "),s("li",[a._v("encodeURIComponent ：会对它发现的任何非标准字符进行编码\n解码分别是：decodeURI() ，decodeURIComponent()")])]),a._v(" "),s("h4",{attrs:{id:"eval-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-方法","aria-hidden":"true"}},[a._v("#")]),a._v(" eval 方法")]),a._v(" "),s("p",[a._v("eval 将接收到的参数当成实际的语句来解析，然后把执行结果插入到原位置")]),a._v(" "),s("h4",{attrs:{id:"global-对象的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-对象的属性","aria-hidden":"true"}},[a._v("#")]),a._v(" Global 对象的属性")]),a._v(" "),s("p",[a._v("特殊值 "),s("code",[a._v("undefined，NaN，Infinity")]),a._v(" 以及原生引用类型的构造函数。")]),a._v(" "),s("h4",{attrs:{id:"window-对象："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window-对象：","aria-hidden":"true"}},[a._v("#")]),a._v(" window 对象：")]),a._v(" "),s("p",[a._v("ECMAScript 虽然没有指出如何直接访问 Global 对象，但 web 浏览器都是将这个全局对象作为 window 对象的一部分加以实现的，因此，在全局作用域中声明的变量和函数，都成为 window 对象的属性")]),a._v(" "),s("h5",{attrs:{id:"另一种获得-global-的方法是利用匿名自执行函数-："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#另一种获得-global-的方法是利用匿名自执行函数-：","aria-hidden":"true"}},[a._v("#")]),a._v(" 另一种获得 Global 的方法是利用匿名自执行函数 ：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[a._v("var")]),a._v(" global "),s("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token keyword"}},[a._v("function")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{attrs:{class:"token keyword"}},[a._v("this")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"math-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" Math 对象")]),a._v(" "),s("ul",[s("li",[a._v("属性："),s("code",[a._v("PI , E , LN10 , SQRT2 ....")])]),a._v(" "),s("li",[a._v("方法："),s("code",[a._v("ceil ， floor ， round ， min ， max ， random ，abs , log , sqrt ...")]),a._v(" 等数学运算的方法")])])])}],!1,null,null,null);r.options.__file="referenceType.md";t.default=r.exports}}]);